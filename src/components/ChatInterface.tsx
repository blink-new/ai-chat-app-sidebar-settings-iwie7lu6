import { useState, useRef, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Avatar, AvatarFallback } from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Send, Bot, User as UserIcon, Sparkles } from 'lucide-react'
import { Chat, Message, User } from '@/App'
import { cn } from '@/lib/utils'

interface ChatInterfaceProps {
  chat?: Chat
  onUpdateChat: (chatId: string, updates: Partial<Chat>) => void
  onNewChat: () => void
  user: User
}

type AIModel = 'claude-3.5-sonnet' | 'claude-3-haiku' | 'gpt-4' | 'gpt-3.5-turbo'

const AI_MODELS: Record<AIModel, { name: string; description: string; badge?: string }> = {
  'claude-3.5-sonnet': { name: 'Claude 3.5 Sonnet', description: 'Most capable model', badge: 'Latest' },
  'claude-3-haiku': { name: 'Claude 3 Haiku', description: 'Fast and efficient' },
  'gpt-4': { name: 'GPT-4', description: 'OpenAI\'s most capable model' },
  'gpt-3.5-turbo': { name: 'GPT-3.5 Turbo', description: 'Fast and cost-effective' }
}

export function ChatInterface({ chat, onUpdateChat, onNewChat }: ChatInterfaceProps) {
  const [input, setInput] = useState('')
  const [selectedModel, setSelectedModel] = useState<AIModel>('claude-3.5-sonnet')
  const [isLoading, setIsLoading] = useState(false)
  const textareaRef = useRef<HTMLTextAreaElement>(null)
  const scrollAreaRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [chat?.messages])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: input.trim(),
      role: 'user',
      timestamp: new Date()
    }

    // If no chat exists, create a new one
    if (!chat) {
      onNewChat()
      return
    }

    // Add user message
    const updatedMessages = [...chat.messages, userMessage]
    onUpdateChat(chat.id, { messages: updatedMessages })

    setInput('')
    setIsLoading(true)

    // Simulate AI response
    setTimeout(() => {
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: generateAIResponse(userMessage.content, selectedModel),
        role: 'assistant',
        timestamp: new Date()
      }

      onUpdateChat(chat.id, { 
        messages: [...updatedMessages, aiMessage],
        title: chat.messages.length === 0 ? userMessage.content.slice(0, 50) : chat.title
      })
      setIsLoading(false)
    }, 1000 + Math.random() * 2000)
  }

  const generateAIResponse = (userInput: string, model: AIModel): string => {
    const responses = [
      `I understand you're asking about "${userInput}". As ${AI_MODELS[model].name}, I can help you with that. This is a simulated response to demonstrate the chat interface.`,
      `That's an interesting question about "${userInput}". Let me provide you with a comprehensive answer using ${AI_MODELS[model].name}'s capabilities.`,
      `Based on your query "${userInput}", I can offer several insights. This response is generated by ${AI_MODELS[model].name} to showcase the chat functionality.`,
      `Thank you for your question about "${userInput}". Here's what I can tell you using ${AI_MODELS[model].name}'s knowledge base.`
    ]
    return responses[Math.floor(Math.random() * responses.length)]
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSubmit(e)
    }
  }

  if (!chat) {
    return (
      <div className="flex-1 flex items-center justify-center bg-background">
        <div className="text-center max-w-md">
          <div className="w-16 h-16 bg-gradient-to-br from-primary to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4">
            <Sparkles className="w-8 h-8 text-primary-foreground" />
          </div>
          <h2 className="text-2xl font-semibold mb-2 text-foreground">Welcome to Claude</h2>
          <p className="text-muted-foreground mb-6">
            Start a conversation with AI. Ask questions, get help with tasks, or just chat.
          </p>
          <Button onClick={onNewChat} className="bg-primary hover:bg-primary/90 text-primary-foreground">
            Start new chat
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="flex-1 flex flex-col bg-background">
      {/* Chat Header */}
      <div className="border-b border-border/40 p-4 bg-background">
        <div className="max-w-3xl mx-auto flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-gradient-to-br from-primary to-purple-600 rounded-lg flex items-center justify-center">
              <Bot className="w-4 h-4 text-primary-foreground" />
            </div>
            <div>
              <h1 className="font-semibold text-foreground">{AI_MODELS[selectedModel].name}</h1>
              <p className="text-sm text-muted-foreground">{AI_MODELS[selectedModel].description}</p>
            </div>
            {AI_MODELS[selectedModel].badge && (
              <Badge variant="secondary" className="text-xs">
                {AI_MODELS[selectedModel].badge}
              </Badge>
            )}
          </div>
        </div>
      </div>

      {/* Messages */}
      <ScrollArea className="flex-1 p-4 bg-background" ref={scrollAreaRef}>
        <div className="max-w-3xl mx-auto space-y-6">
          {chat.messages.map((message) => (
            <div
              key={message.id}
              className={cn(
                "flex gap-4",
                message.role === 'user' ? 'justify-end' : 'justify-start'
              )}
            >
              {message.role === 'assistant' && (
                <Avatar className="w-8 h-8 mt-1">
                  <AvatarFallback className="bg-gradient-to-br from-primary to-purple-600 text-primary-foreground">
                    <Bot className="w-4 h-4" />
                  </AvatarFallback>
                </Avatar>
              )}
              
              <div
                className={cn(
                  "max-w-[80%] rounded-2xl px-4 py-3",
                  message.role === 'user'
                    ? 'bg-primary text-primary-foreground ml-auto'
                    : 'bg-muted text-muted-foreground'
                )}
              >
                <p className="whitespace-pre-wrap">{message.content}</p>
                <div className={cn(
                  "text-xs mt-2 opacity-70",
                  message.role === 'user' ? 'text-primary-foreground/70' : 'text-muted-foreground/70'
                )}>
                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </div>
              </div>

              {message.role === 'user' && (
                <Avatar className="w-8 h-8 mt-1">
                  <AvatarFallback className="bg-muted text-muted-foreground">
                    <UserIcon className="w-4 h-4" />
                  </AvatarFallback>
                </Avatar>
              )}
            </div>
          ))}

          {isLoading && (
            <div className="flex gap-4 justify-start">
              <Avatar className="w-8 h-8 mt-1">
                <AvatarFallback className="bg-gradient-to-br from-primary to-purple-600 text-primary-foreground">
                  <Bot className="w-4 h-4" />
                </AvatarFallback>
              </Avatar>
              <div className="bg-muted rounded-2xl px-4 py-3">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                </div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      {/* Input Area */}
      <div className="border-t border-border/40 p-4 bg-background">
        <div className="max-w-3xl mx-auto">
          {/* Model Selector */}
          <div className="mb-3">
            <Select value={selectedModel} onValueChange={(value: AIModel) => setSelectedModel(value)}>
              <SelectTrigger className="w-64 h-8 text-sm">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {Object.entries(AI_MODELS).map(([key, model]) => (
                  <SelectItem key={key} value={key}>
                    <div className="flex items-center gap-2">
                      <span>{model.name}</span>
                      {model.badge && (
                        <Badge variant="secondary" className="text-xs">
                          {model.badge}
                        </Badge>
                      )}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Input Form */}
          <form onSubmit={handleSubmit} className="relative">
            <Textarea
              ref={textareaRef}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Message Claude..."
              className="min-h-[60px] max-h-[200px] pr-12 resize-none"
              disabled={isLoading}
            />
            <Button
              type="submit"
              size="sm"
              disabled={!input.trim() || isLoading}
              className="absolute right-2 bottom-2 h-8 w-8 p-0 bg-primary hover:bg-primary/90 text-primary-foreground"
            >
              <Send className="w-4 h-4" />
            </Button>
          </form>

          <div className="text-xs text-muted-foreground mt-2 text-center">
            Claude can make mistakes. Please double-check responses.
          </div>
        </div>
      </div>
    </div>
  )
}